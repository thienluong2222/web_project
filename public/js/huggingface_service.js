// Hugging Face NLP Service - Optimized for Vietnamese Yarn Shop Chatbot
class HuggingFaceNLPService {
    constructor() {
        // Validate dependencies
        if (typeof HUGGINGFACE_CONFIG === "undefined") {
            console.error(
                "‚ùå HUGGINGFACE_CONFIG not found. Make sure nlp-config.js is loaded first."
            );
            throw new Error("HUGGINGFACE_CONFIG is required but not found");
        }

        if (typeof VIETNAMESE_PATTERNS === "undefined") {
            console.error("‚ùå VIETNAMESE_PATTERNS not found");
            throw new Error("VIETNAMESE_PATTERNS is required but not found");
        }

        this.config = HUGGINGFACE_CONFIG;
        this.patterns = VIETNAMESE_PATTERNS;
        this.entityPatterns = ENTITY_PATTERNS;
        this.responseTemplates = RESPONSE_TEMPLATES;

        // API management
        this.requestCount = 0;
        this.lastRequestTime = 0;
        this.cache = new Map();
        this.isModelLoading = new Map();

        console.log("‚úÖ Hugging Face NLP Service initialized successfully");
        console.log("üìä Available models:", Object.keys(this.config.models));
    }

    // Rate limiting ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° gi·ªõi h·∫°n API
    async checkRateLimit() {
        const now = Date.now();
        const timeDiff = now - this.lastRequestTime;

        if (timeDiff < 60000) {
            // 1 ph√∫t
            if (this.requestCount >= this.config.rateLimit.requestsPerMinute) {
                const waitTime = 60000 - timeDiff;
                console.log(`‚è≥ Rate limit reached, waiting ${waitTime}ms`);
                await new Promise((resolve) => setTimeout(resolve, waitTime));
                this.requestCount = 0;
            }
        } else {
            this.requestCount = 0;
        }

        this.requestCount++;
        this.lastRequestTime = now;
    }

    // G·ªçi API Hugging Face v·ªõi retry logic
    async callHuggingFaceAPI(modelName, input, options = {}) {
        const cacheKey = `${modelName}:${JSON.stringify(input)}`;

        // Ki·ªÉm tra cache tr∆∞·ªõc
        if (this.cache.has(cacheKey)) {
            console.log("üìã Using cached result for:", modelName);
            return this.cache.get(cacheKey);
        }

        await this.checkRateLimit();

        const url = `${this.config.baseUrl}/${modelName}`;
        let retries = 0;

        while (retries < this.config.rateLimit.maxRetries) {
            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        Authorization: `Bearer ${this.config.apiKey}`,
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        inputs: input,
                        options: {
                            wait_for_model: true,
                            use_cache: true,
                            ...options,
                        },
                    }),
                    signal: AbortSignal.timeout(this.config.timeout),
                });

                if (response.status === 503) {
                    // Model ƒëang loading
                    console.log(`üîÑ Model ${modelName} is loading, waiting...`);
                    await new Promise((resolve) => setTimeout(resolve, 2000));
                    retries++;
                    continue;
                }

                if (!response.ok) {
                    throw new Error(
                        `API Error: ${response.status} - ${response.statusText}`
                    );
                }

                const result = await response.json();

                // Cache k·∫øt qu·∫£ th√†nh c√¥ng
                this.cache.set(cacheKey, result);

                // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc cache
                if (this.cache.size > 100) {
                    const firstKey = this.cache.keys().next().value;
                    this.cache.delete(firstKey);
                }

                return result;
            } catch (error) {
                retries++;
                console.error(`‚ùå Attempt ${retries} failed:`, error.message);

                if (retries >= this.config.rateLimit.maxRetries) {
                    throw new Error(
                        `Failed after ${retries} attempts: ${error.message}`
                    );
                }

                await new Promise((resolve) =>
                    setTimeout(resolve, this.config.rateLimit.retryDelay)
                );
            }
        }
    }

    // Ph√¢n t√≠ch c·∫£m x√∫c
    async analyzeSentiment(message) {
        try {
            const result = await this.callHuggingFaceAPI(
                this.config.models.sentiment,
                message
            );

            if (result && result.length > 0) {
                const sentiment = result[0];
                return {
                    label: sentiment.label,
                    score: sentiment.score,
                    confidence:
                        sentiment.score > 0.7
                            ? "high"
                            : sentiment.score > 0.4
                            ? "medium"
                            : "low",
                };
            }

            return { label: "NEUTRAL", score: 0.5, confidence: "low" };
        } catch (error) {
            console.error("‚ùå Sentiment analysis failed:", error);
            return {
                label: "NEUTRAL",
                score: 0.5,
                confidence: "low",
                error: true,
            };
        }
    }

    // Ph√¢n t√≠ch intent t·ª´ patterns local
    analyzeIntent(message) {
        const lowerMessage = message.toLowerCase();

        for (const [intentType, keywords] of Object.entries(this.patterns)) {
            for (const keyword of keywords) {
                if (lowerMessage.includes(keyword.toLowerCase())) {
                    return {
                        intent: intentType,
                        confidence: 0.8,
                        keyword: keyword,
                    };
                }
            }
        }

        return {
            intent: "unknown",
            confidence: 0.1,
            keyword: null,
        };
    }

    // Tr√≠ch xu·∫•t entities
    extractEntities(message) {
        const entities = [];
        const lowerMessage = message.toLowerCase();

        for (const [entityType, patterns] of Object.entries(
            this.entityPatterns
        )) {
            if (Array.isArray(patterns)) {
                for (const pattern of patterns) {
                    if (lowerMessage.includes(pattern.toLowerCase())) {
                        entities.push({
                            type: entityType,
                            value: pattern,
                            confidence: 0.9,
                        });
                    }
                }
            } else if (patterns instanceof RegExp) {
                const matches = message.match(patterns);
                if (matches) {
                    matches.forEach((match) => {
                        entities.push({
                            type: entityType,
                            value: match,
                            confidence: 0.95,
                        });
                    });
                }
            }
        }

        return entities;
    }

    // T·∫°o ph·∫£n h·ªìi th√¥ng minh
    async generateResponse(message) {
        try {
            console.log("ü§ñ Analyzing message:", message);

            // Ph√¢n t√≠ch parallel
            const [sentiment, intent] = await Promise.all([
                this.analyzeSentiment(message),
                Promise.resolve(this.analyzeIntent(message)),
            ]);

            const entities = this.extractEntities(message);

            console.log("üìä Analysis results:", {
                sentiment,
                intent,
                entities,
            });

            // T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n intent
            let response = await this.generateIntentBasedResponse(
                intent,
                entities,
                sentiment
            );

            // N·∫øu kh√¥ng c√≥ ph·∫£n h·ªìi ph√π h·ª£p, s·ª≠ d·ª•ng AI generation
            if (!response || response.includes("Xin l·ªói")) {
                response = await this.generateAIResponse(
                    message,
                    intent,
                    sentiment
                );
            }

            return {
                response,
                analysis: {
                    sentiment,
                    intent,
                    entities,
                    confidence: this.calculateOverallConfidence(
                        sentiment,
                        intent,
                        entities
                    ),
                },
            };
        } catch (error) {
            console.error("‚ùå Response generation failed:", error);
            return {
                response:
                    "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi shop qua hotline.",
                analysis: {
                    sentiment: {
                        label: "NEUTRAL",
                        score: 0.5,
                        confidence: "low",
                    },
                    intent: { intent: "unknown", confidence: 0.1 },
                    entities: [],
                    confidence: "low",
                    error: true,
                },
            };
        }
    }

    // T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n intent
    async generateIntentBasedResponse(intent, entities, sentiment) {
        const intentType = intent.intent;

        switch (intentType) {
            case "greetings":
                return this.getRandomResponse("greeting");

            case "product_inquiry":
                return this.handleProductInquiry(entities);

            case "price_inquiry":
                return this.handlePriceInquiry(entities);

            case "order_inquiry":
                return this.getRandomResponse("order_help");

            case "support_inquiry":
                return this.handleSupportInquiry(entities);

            case "farewell":
                return this.getRandomResponse("farewell");

            default:
                return null; // S·∫Ω fallback to AI response
        }
    }

    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m
    handleProductInquiry(entities) {
        const productEntities = entities.filter(
            (e) => e.type === "yarn_types" || e.type === "knitting_tools"
        );

        if (productEntities.length > 0) {
            const product = productEntities[0].value;
            return `Ch√∫ng t√¥i c√≥ s·∫£n ph·∫©m ${product} v·ªõi nhi·ªÅu m√†u s·∫Øc v√† k√≠ch c·ª° kh√°c nhau. B·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin g√¨ v·ªÅ ${product}? Ho·∫∑c b·∫°n c√≥ th·ªÉ xem chi ti·∫øt tr√™n website c·ªßa shop.`;
        }

        return this.getRandomResponse("product_info");
    }

    // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ gi√°
    handlePriceInquiry(entities) {
        const productEntities = entities.filter(
            (e) => e.type === "yarn_types" || e.type === "knitting_tools"
        );

        if (productEntities.length > 0) {
            const product = productEntities[0].value;
            return `Gi√° ${product} t√πy thu·ªôc v√†o lo·∫°i v√† ch·∫•t l∆∞·ª£ng. Th√¥ng th∆∞·ªùng t·ª´ 15k-100k. B·∫°n c√≥ th·ªÉ xem gi√° chi ti·∫øt tr√™n website ho·∫∑c li√™n h·ªá shop ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n gi√° t·ªët nh·∫•t.`;
        }

        return this.getRandomResponse("price_info");
    }

    // X·ª≠ l√Ω h·ªó tr·ª£
    handleSupportInquiry(entities) {
        return "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ: üß∂ T∆∞ v·∫•n s·∫£n ph·∫©m len v√† d·ª•ng c·ª•, üí∞ Th√¥ng tin gi√° c·∫£, üì¶ H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng, üöö Ch√≠nh s√°ch giao h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ g√¨?";
    }

    // T·∫°o ph·∫£n h·ªìi b·∫±ng AI khi kh√¥ng match intent
    async generateAIResponse(message, intent, sentiment) {
        try {
            // S·ª≠ d·ª•ng conversational model ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
            const context = `T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa shop len ƒëan m√≥c. Kh√°ch h√†ng h·ªèi: "${message}"`;

            const result = await this.callHuggingFaceAPI(
                this.config.models.conversational,
                context,
                { max_length: 100, temperature: 0.7 }
            );

            if (result && result.generated_text) {
                let aiResponse = result.generated_text;

                // Post-process AI response
                aiResponse = this.postProcessAIResponse(aiResponse);

                return aiResponse;
            }
        } catch (error) {
            console.error("‚ùå AI response generation failed:", error);
        }

        // Fallback response
        return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i s·∫Ω chuy·ªÉn c√¢u h·ªèi c·ªßa b·∫°n cho nh√¢n vi√™n t∆∞ v·∫•n. Ho·∫∑c b·∫°n c√≥ th·ªÉ li√™n h·ªá tr·ª±c ti·∫øp qua hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.";
    }

    // X·ª≠ l√Ω h·∫≠u k·ª≥ cho AI response
    postProcessAIResponse(response) {
        // Lo·∫°i b·ªè context
        response = response.replace(/T√¥i l√† tr·ª£ l√Ω ·∫£o.*?h·ªèi:\s*"/gi, "");
        response = response.replace(/^["']|["']$/g, "");

        // ƒê·∫£m b·∫£o ph·∫£n h·ªìi ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh shop len
        if (
            !response.includes("len") &&
            !response.includes("shop") &&
            !response.includes("ƒëan")
        ) {
            response +=
                " B·∫°n c√≥ c·∫ßn t∆∞ v·∫•n th√™m v·ªÅ s·∫£n ph·∫©m len ho·∫∑c d·ª•ng c·ª• ƒëan m√≥c kh√¥ng?";
        }

        return response.trim();
    }

    // L·∫•y ph·∫£n h·ªìi ng·∫´u nhi√™n t·ª´ template
    getRandomResponse(type) {
        const responses = this.responseTemplates[type];
        if (responses && responses.length > 0) {
            return responses[Math.floor(Math.random() * responses.length)];
        }
        return "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi shop len ƒëan m√≥c!";
    }

    // T√≠nh to√°n ƒë·ªô tin c·∫≠y t·ªïng th·ªÉ
    calculateOverallConfidence(sentiment, intent, entities) {
        const sentimentConf =
            sentiment.confidence === "high"
                ? 0.8
                : sentiment.confidence === "medium"
                ? 0.6
                : 0.3;
        const intentConf = intent.confidence;
        const entityConf = entities.length > 0 ? 0.7 : 0.3;

        const overall = (sentimentConf + intentConf + entityConf) / 3;

        if (overall > 0.7) return "high";
        if (overall > 0.5) return "medium";
        return "low";
    }

    // Ki·ªÉm tra tr·∫°ng th√°i service
    getStatus() {
        return {
            provider: "Hugging Face",
            modelsAvailable: Object.keys(this.config.models),
            cacheSize: this.cache.size,
            requestCount: this.requestCount,
            lastRequestTime: new Date(this.lastRequestTime).toLocaleString(),
            status: "active",
        };
    }

    // Clear cache
    clearCache() {
        this.cache.clear();
        console.log("üóëÔ∏è Cache cleared");
    }
}

// Global instance for browser usage
if (typeof window !== "undefined") {
    window.HuggingFaceNLPService = HuggingFaceNLPService;
}

// Export for modules
if (typeof module !== "undefined" && module.exports) {
    module.exports = HuggingFaceNLPService;
}
