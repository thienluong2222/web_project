// Yarn Shop Chatbot - Optimized for Hugging Face NLP
class YarnShopChatbot {
    constructor() {
        this.isOpen = false;
        this.messages = [];
        this.products = [];
        this.nlpService = null;
        this.conversationContext = {
            currentTopic: null,
            userIntent: null,
            entities: {},
            sessionId: this.generateSessionId(),
            messageCount: 0,
        };
        this.init();
        this.loadProducts();
        this.initializeHuggingFaceNLP();
    }

    async loadProducts() {
        try {
            const response = await fetch("/src/data.json");
            const data = await response.json();
            this.products = data.products || [];
            console.log(`üì¶ Loaded ${this.products.length} products`);
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m:", error);
            this.products = [];
        }
    }

    async initializeHuggingFaceNLP() {
        try {
            // ƒê·ª£i configs load xong
            await this.waitForConfigs();

            this.nlpService = new HuggingFaceNLPService();
            console.log("‚úÖ Hugging Face NLP Service initialized successfully");

            // Test service
            const status = this.nlpService.getStatus();
            console.log("ü§ñ NLP Service Status:", status);
        } catch (error) {
            console.error(
                "‚ùå Failed to initialize Hugging Face NLP Service:",
                error
            );
            this.nlpService = null;
        }
    }

    async waitForConfigs() {
        let attempts = 0;
        const maxAttempts = 50; // 5 seconds

        while (attempts < maxAttempts) {
            if (
                typeof HUGGINGFACE_CONFIG !== "undefined" &&
                typeof VIETNAMESE_PATTERNS !== "undefined"
            ) {
                return;
            }
            await new Promise((resolve) => setTimeout(resolve, 100));
            attempts++;
        }

        throw new Error("Required configs not loaded after 5 seconds");
    }

    generateSessionId() {
        return (
            "session_" +
            Date.now() +
            "_" +
            Math.random().toString(36).substr(2, 9)
        );
    }

    init() {
        this.createChatbotHTML();
        this.bindEvents();
        this.addWelcomeMessage();
    }

    createChatbotHTML() {
        const chatbotHTML = `
            <div class="chatbot-container">
                <button class="chatbot-button" id="chatbotToggle">
                    <i class="fas fa-comments"></i>
                    <i class="fas fa-times"></i>
                </button>
                
                <div class="chatbot-window" id="chatbotWindow">
                    <div class="chatbot-header">
                        <i class="fas fa-robot"></i>
                        <span>H·ªó tr·ª£ kh√°ch h√†ng - Len ƒêan M√≥c</span>
                        <small>Powered by Hugging Face AI</small>
                    </div>
                    
                    <div class="chatbot-messages" id="chatbotMessages">
                        <!-- Messages will be added here -->
                    </div>
                    
                    <div class="chatbot-input-container">
                        <input type="text" class="chatbot-input" id="chatbotInput" 
                               placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...">
                        <button class="chatbot-send-btn" id="chatbotSend">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML("beforeend", chatbotHTML);
    }

    bindEvents() {
        const toggleBtn = document.getElementById("chatbotToggle");
        const sendBtn = document.getElementById("chatbotSend");
        const input = document.getElementById("chatbotInput");

        toggleBtn.addEventListener("click", () => this.toggleChatbot());
        sendBtn.addEventListener("click", () => this.sendMessage());
        input.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                this.sendMessage();
            }
        });
    }

    toggleChatbot() {
        const button = document.getElementById("chatbotToggle");
        const window = document.getElementById("chatbotWindow");

        this.isOpen = !this.isOpen;

        if (this.isOpen) {
            button.classList.add("active");
            window.classList.add("show");
        } else {
            button.classList.remove("active");
            window.classList.remove("show");
        }
    }

    addWelcomeMessage() {
        const welcomeMessage =
            "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa shop len ƒëan m√≥c. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:";
        const quickReplies = [
            "T√¨m s·∫£n ph·∫©m len",
            "D·ª•ng c·ª• ƒëan m√≥c",
            "Xem b·∫£ng gi√°",
            "H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng",
            "Li√™n h·ªá shop",
        ];

        this.addMessage(welcomeMessage, "bot");
        setTimeout(() => {
            this.addQuickReplies(quickReplies);
        }, 1000);
    }

    addMessage(text, sender, quickReplies = null) {
        const messagesContainer = document.getElementById("chatbotMessages");
        const messageDiv = document.createElement("div");
        messageDiv.className = `chatbot-message ${sender}`;

        const avatar = document.createElement("div");
        avatar.className = "message-avatar";
        avatar.innerHTML =
            sender === "bot"
                ? '<i class="fas fa-robot"></i>'
                : '<i class="fas fa-user"></i>';

        const content = document.createElement("div");
        content.className = "message-content";
        content.innerHTML = text.replace(/\n/g, "<br>");

        const timestamp = document.createElement("div");
        timestamp.className = "message-timestamp";
        timestamp.textContent = new Date().toLocaleTimeString("vi-VN", {
            hour: "2-digit",
            minute: "2-digit",
        });

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);
        messageDiv.appendChild(timestamp);

        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        this.messages.push({
            text: text,
            sender: sender,
            timestamp: new Date(),
            quickReplies: quickReplies,
        });
    }

    showTypingIndicator() {
        const messagesContainer = document.getElementById("chatbotMessages");
        const typingDiv = document.createElement("div");
        typingDiv.className = "chatbot-message bot typing-indicator";
        typingDiv.id = "typingIndicator";

        typingDiv.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;

        messagesContainer.appendChild(typingDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    hideTypingIndicator() {
        const typingIndicator = document.getElementById("typingIndicator");
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    sendMessage() {
        const input = document.getElementById("chatbotInput");
        const message = input.value.trim();

        if (!message) return;

        this.addMessage(message, "user");
        input.value = "";

        // Show typing indicator
        this.showTypingIndicator();

        // Process with NLP or fallback
        setTimeout(() => {
            this.hideTypingIndicator();
            this.generateBotResponse(message);
        }, 1500);
    }

    handleQuickReply(reply) {
        this.addMessage(reply, "user");

        this.showTypingIndicator();
        setTimeout(() => {
            this.hideTypingIndicator();
            this.generateBotResponse(reply);
        }, 1000);
    }

    async generateBotResponse(userMessage) {
        try {
            // Use Hugging Face NLP service if available
            if (this.nlpService) {
                await this.generateHuggingFaceResponse(userMessage);
            } else {
                this.generateFallbackResponse(userMessage);
            }
        } catch (error) {
            console.error("‚ùå Error generating response:", error);
            this.generateFallbackResponse(userMessage);
        }
    }

    async generateHuggingFaceResponse(userMessage) {
        try {
            // TƒÉng s·ªë l∆∞·ª£ng tin nh·∫Øn
            this.conversationContext.messageCount++;

            console.log(
                `ü§ñ Processing message #${this.conversationContext.messageCount}: "${userMessage}"`
            );

            // S·ª≠ d·ª•ng Hugging Face NLP Service
            const result = await this.nlpService.generateResponse(userMessage);

            console.log("üìä Hugging Face Analysis:", result.analysis);

            // C·∫≠p nh·∫≠t context
            this.updateConversationContext(result.analysis, userMessage);

            // Hi·ªÉn th·ªã response
            this.addMessage(result.response, "bot");

            // Th√™m quick replies d·ª±a tr√™n intent
            this.addContextualQuickReplies(result.analysis.intent.intent);
        } catch (error) {
            console.error("‚ùå Hugging Face NLP Response Error:", error);
            this.generateFallbackResponse(userMessage);
        }
    }

    updateConversationContext(analysis, originalMessage) {
        // C·∫≠p nh·∫≠t context v·ªõi th√¥ng tin t·ª´ Hugging Face
        this.conversationContext.userIntent = analysis.intent.intent;
        this.conversationContext.lastMessage = originalMessage;
        this.conversationContext.lastSentiment = analysis.sentiment.label;
        this.conversationContext.confidence = analysis.confidence;

        // L∆∞u entities
        analysis.entities.forEach((entity) => {
            if (!this.conversationContext.entities[entity.type]) {
                this.conversationContext.entities[entity.type] = [];
            }
            this.conversationContext.entities[entity.type].push(entity.value);
        });

        // C·∫≠p nh·∫≠t topic d·ª±a tr√™n intent
        switch (analysis.intent.intent) {
            case "product_inquiry":
                this.conversationContext.currentTopic = "products";
                break;
            case "price_inquiry":
                this.conversationContext.currentTopic = "pricing";
                break;
            case "order_inquiry":
                this.conversationContext.currentTopic = "ordering";
                break;
            case "support_inquiry":
                this.conversationContext.currentTopic = "support";
                break;
            case "greetings":
                this.conversationContext.currentTopic = "welcome";
                break;
            case "farewell":
                this.conversationContext.currentTopic = "goodbye";
                break;
        }

        console.log(
            "üìã Updated conversation context:",
            this.conversationContext
        );
    }

    // Th√™m quick replies d·ª±a tr√™n intent
    addContextualQuickReplies(intent) {
        let quickReplies = [];

        switch (intent) {
            case "greetings":
                quickReplies = [
                    "Xem s·∫£n ph·∫©m len",
                    "D·ª•ng c·ª• ƒëan m√≥c",
                    "B·∫£ng gi√°",
                    "H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng",
                ];
                break;

            case "product_inquiry":
                quickReplies = [
                    "Len Yarnart Jeans",
                    "Len Susan Family",
                    "Kim m√≥c Tulip",
                    "Xem th√™m s·∫£n ph·∫©m",
                ];
                break;

            case "price_inquiry":
                quickReplies = [
                    "Gi√° len c√°c lo·∫°i",
                    "Gi√° kim m√≥c",
                    "Khuy·∫øn m√£i hi·ªán t·∫°i",
                    "So s√°nh gi√°",
                ];
                break;

            case "order_inquiry":
                quickReplies = [
                    "C√°ch ƒë·∫∑t h√†ng",
                    "Ph∆∞∆°ng th·ª©c thanh to√°n",
                    "Ch√≠nh s√°ch giao h√†ng",
                    "Li√™n h·ªá ƒë·∫∑t h√†ng",
                ];
                break;

            default:
                quickReplies = ["S·∫£n ph·∫©m", "Gi√° c·∫£", "ƒê·∫∑t h√†ng", "Li√™n h·ªá"];
        }

        if (quickReplies.length > 0) {
            setTimeout(() => {
                this.addQuickReplies(quickReplies);
            }, 500);
        }
    }

    // Th√™m quick replies
    addQuickReplies(replies) {
        if (!replies || replies.length === 0) return;

        const messagesContainer = document.getElementById("chatbotMessages");
        const quickRepliesContainer = document.createElement("div");
        quickRepliesContainer.className = "quick-replies-container";

        replies.forEach((reply) => {
            const button = document.createElement("button");
            button.className = "quick-reply-btn";
            button.textContent = reply;
            button.onclick = () => this.handleQuickReply(reply);
            quickRepliesContainer.appendChild(button);
        });

        messagesContainer.appendChild(quickRepliesContainer);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Fallback response khi NLP kh√¥ng kh·∫£ d·ª•ng
    generateFallbackResponse(message) {
        const lowerMessage = message.toLowerCase();
        let response = "";
        let quickReplies = [];

        if (
            lowerMessage.includes("xin ch√†o") ||
            lowerMessage.includes("hello") ||
            lowerMessage.includes("ch√†o")
        ) {
            response =
                "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa shop len ƒëan m√≥c. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m len, kim ƒëan, v√† d·ª•ng c·ª• ƒëan m√≥c. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?";
            quickReplies = [
                "S·∫£n ph·∫©m len",
                "D·ª•ng c·ª• ƒëan",
                "B·∫£ng gi√°",
                "H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng",
            ];
        } else if (
            lowerMessage.includes("len") ||
            lowerMessage.includes("s·ª£i")
        ) {
            response =
                "Ch√∫ng t√¥i c√≥ nhi·ªÅu lo·∫°i len ch·∫•t l∆∞·ª£ng cao nh∆∞:\n‚Ä¢ Len Yarnart Jeans\n‚Ä¢ Len Susan Family\n‚Ä¢ Len Mohair\n‚Ä¢ Len Milkcotton\n\nB·∫°n quan t√¢m lo·∫°i len n√†o?";
            quickReplies = [
                "Len Yarnart",
                "Len Susan",
                "Xem t·∫•t c·∫£",
                "T∆∞ v·∫•n ch·ªçn len",
            ];
        } else if (
            lowerMessage.includes("gi√°") ||
            lowerMessage.includes("bao nhi√™u")
        ) {
            response =
                "Gi√° s·∫£n ph·∫©m c·ªßa shop:\n‚Ä¢ Len c√°c lo·∫°i: 15k-50k/cu·ªôn\n‚Ä¢ Kim m√≥c: 20k-100k/b·ªô\n‚Ä¢ D·ª•ng c·ª• h·ªó tr·ª£: 10k-50k\n\nB·∫°n mu·ªën bi·∫øt gi√° chi ti·∫øt s·∫£n ph·∫©m n√†o?";
            quickReplies = [
                "Gi√° len",
                "Gi√° kim m√≥c",
                "Khuy·∫øn m√£i",
                "So s√°nh gi√°",
            ];
        } else if (
            lowerMessage.includes("ƒë·∫∑t h√†ng") ||
            lowerMessage.includes("mua")
        ) {
            response =
                "ƒê·ªÉ ƒë·∫∑t h√†ng b·∫°n c√≥ th·ªÉ:\n1. Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr√™n website\n2. Li√™n h·ªá hotline ƒë·ªÉ ƒë·∫∑t h√†ng\n3. Inbox fanpage c·ªßa shop\n\nCh√∫ng t√¥i h·ªó tr·ª£ COD v√† chuy·ªÉn kho·∫£n.";
            quickReplies = [
                "C√°ch ƒë·∫∑t h√†ng",
                "Thanh to√°n",
                "Giao h√†ng",
                "Li√™n h·ªá",
            ];
        } else if (
            lowerMessage.includes("kim") ||
            lowerMessage.includes("d·ª•ng c·ª•")
        ) {
            response =
                "Shop c√≥ ƒë·∫ßy ƒë·ªß d·ª•ng c·ª• ƒëan len:\n‚Ä¢ Kim m√≥c c√°c size\n‚Ä¢ Kim ƒëan\n‚Ä¢ K√©o chuy√™n d·ª•ng\n‚Ä¢ M√°y ƒë·∫øm m≈©i\n‚Ä¢ Ghim c√†i v√† ph·ª• ki·ªán\n\nT·∫•t c·∫£ ch√≠nh h√£ng, ch·∫•t l∆∞·ª£ng cao!";
            quickReplies = [
                "Kim m√≥c Tulip",
                "Kim ƒëan",
                "Set d·ª•ng c·ª•",
                "Ph·ª• ki·ªán",
            ];
        } else if (
            lowerMessage.includes("c·∫£m ∆°n") ||
            lowerMessage.includes("t·∫°m bi·ªát")
        ) {
            response =
                "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn shop! Ch√∫c b·∫°n ƒëan m√≥c vui v·∫ª v√† t·∫°o ra nh·ªØng s·∫£n ph·∫©m ƒë·∫πp! üß∂‚ú®";
            quickReplies = [];
        } else {
            response =
                "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\nüß∂ T∆∞ v·∫•n s·∫£n ph·∫©m len v√† d·ª•ng c·ª•\nüí∞ Th√¥ng tin gi√° c·∫£\nüì¶ H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng\nüìû Th√¥ng tin li√™n h·ªá\n\nB·∫°n mu·ªën h·ªèi v·ªÅ g√¨?";
            quickReplies = ["S·∫£n ph·∫©m", "Gi√° c·∫£", "ƒê·∫∑t h√†ng", "Li√™n h·ªá"];
        }

        this.addMessage(response, "bot");
        if (quickReplies.length > 0) {
            setTimeout(() => {
                this.addQuickReplies(quickReplies);
            }, 500);
        }
    }

    // T√¨m ki·∫øm s·∫£n ph·∫©m ƒë∆°n gi·∫£n
    searchProducts(productKeywords, colors = []) {
        if (!this.products || this.products.length === 0) {
            return [];
        }

        return this.products.filter((product) => {
            const nameMatch = productKeywords.some((keyword) =>
                product.name.toLowerCase().includes(keyword.toLowerCase())
            );

            const colorMatch =
                colors.length === 0 ||
                colors.some((color) =>
                    (product.description || "")
                        .toLowerCase()
                        .includes(color.toLowerCase())
                );

            return nameMatch && colorMatch;
        });
    }

    // L·∫•y tr·∫°ng th√°i chatbot
    getStatus() {
        return {
            isOpen: this.isOpen,
            messageCount: this.messages.length,
            nlpAvailable: !!this.nlpService,
            conversationContext: this.conversationContext,
            productsLoaded: this.products.length,
        };
    }
}

// Kh·ªüi t·∫°o chatbot khi trang web load xong
document.addEventListener("DOMContentLoaded", () => {
    console.log("üöÄ Initializing Yarn Shop Chatbot with Hugging Face NLP...");
    window.yarnShopChatbot = new YarnShopChatbot();
});
